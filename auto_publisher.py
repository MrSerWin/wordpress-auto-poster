#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç–µ–π
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç–µ–π –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è
"""

import os
import sys
import time
import logging
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from gemini_client import generate_article_with_image
from wordpress_client import upload_image_to_wp, create_wp_post, get_or_create_tag

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auto_publisher.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

DB_FILE = 'storage.db'
PUBLISH_INTERVAL_DAYS = 3

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS plans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        seed TEXT,
        seo_focus TEXT,
        created_at TEXT,
        last_published_at TEXT,
        status TEXT
    )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS posts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        slug TEXT,
        wp_id INTEGER,
        published_at TEXT,
        seo_keywords TEXT
    )""")
    conn.commit()
    conn.close()

def get_next_plan():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT id, seed, seo_focus, created_at, last_published_at FROM plans WHERE status='pending' ORDER BY created_at LIMIT 1")
    row = cur.fetchone()
    conn.close()
    return row

def mark_plan_published(plan_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞–Ω –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('UPDATE plans SET last_published_at=?, status=? WHERE id=?', 
                (datetime.now().isoformat(), 'published', plan_id))
    conn.commit()
    conn.close()

def save_post_record(title, slug, wp_id, keywords):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ"""
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('INSERT INTO posts (title, slug, wp_id, published_at, seo_keywords) VALUES (?, ?, ?, ?, ?)',
                (title, slug, wp_id, datetime.now().isoformat(), str(keywords)))
    conn.commit()
    conn.close()

def publish_next_article():
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é"""
    try:
        plan = get_next_plan()
        if not plan:
            logger.info("–ù–µ—Ç —Å—Ç–∞—Ç–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return False
        
        plan_id, seed, seo_focus, created_at, last_pub = plan
        logger.info(f"–ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é: {seed[:50]}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        article = generate_article_with_image(topic=seed)
        
        title = article.get('title') or seed
        slug = article.get('slug')
        meta = article.get('meta_description')
        keywords = article.get('keywords') or []
        content_html = article.get('content')
        image_prompt = article.get('image_prompt', f'Illustration for: {seed}')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ WordPress
        featured_media_id = None
        if article.get("image_url"):
            try:
                with open(article["image_url"], "rb") as f:
                    image_bytes = f.read()
                
                filename = os.path.basename(article["image_url"])
                upload_result = upload_image_to_wp(image_bytes, filename, mime_type='image/png')
                featured_media_id = upload_result.get('id')
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {featured_media_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏
        tag_ids = []
        if keywords:
            for keyword in keywords:
                try:
                    tag_id = get_or_create_tag(keyword)
                    if tag_id:
                        tag_ids.append(tag_id)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞ {keyword}: {e}")
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é
        wp_post = create_wp_post(
            title=title,
            content_html=content_html,
            slug=slug,
            status='publish',
            featured_media_id=featured_media_id,
            meta_description=meta,
            tags=tag_ids if tag_ids else None
        )
        
        wp_id = wp_post.get('id')
        save_post_record(title, slug, wp_id, keywords)
        mark_plan_published(plan_id)
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title} -> WP ID: {wp_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    
    cur.execute("SELECT COUNT(*) FROM plans WHERE status='pending'")
    pending_count = cur.fetchone()[0]
    
    cur.execute("SELECT COUNT(*) FROM plans WHERE status='published'")
    published_count = cur.fetchone()[0]
    
    cur.execute("SELECT COUNT(*) FROM posts")
    total_posts = cur.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    cur.execute("SELECT last_published_at FROM plans WHERE status='published' ORDER BY last_published_at DESC LIMIT 1")
    last_publish_row = cur.fetchone()
    
    conn.close()
    
    last_publish_time = None
    next_publish = datetime.now() + timedelta(days=PUBLISH_INTERVAL_DAYS)
    
    if last_publish_row and last_publish_row[0]:
        try:
            last_publish_time = datetime.fromisoformat(last_publish_row[0])
            next_publish = last_publish_time + timedelta(days=PUBLISH_INTERVAL_DAYS)
        except ValueError:
            pass
    
    return {
        'pending_articles': pending_count,
        'published_articles': published_count,
        'total_posts': total_posts,
        'last_publish_time': last_publish_time,
        'next_publish': next_publish
    }

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π")
    logger.info(f"üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –∫–∞–∂–¥—ã–µ {PUBLISH_INTERVAL_DAYS} –¥–Ω–µ–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status = get_status()
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status['pending_articles']} —Å—Ç–∞—Ç–µ–π –æ–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, {status['published_articles']} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
    
    if status['last_publish_time']:
        logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {status['last_publish_time'].strftime('%Y-%m-%d %H:%M')}")
        logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {status['next_publish'].strftime('%Y-%m-%d %H:%M')}")
    else:
        logger.info("üìÖ –≠—Ç–æ –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è")
    
    while True:
        try:
            current_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            status = get_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é
            should_publish = False
            
            if status['last_publish_time'] is None:
                # –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
                should_publish = True
                logger.info("üéØ –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - –ø—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                time_since_last = current_time - status['last_publish_time']
                if time_since_last >= timedelta(days=PUBLISH_INTERVAL_DAYS):
                    should_publish = True
                    logger.info(f"‚è∞ –ü—Ä–æ—à–ª–æ {time_since_last.days} –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
                else:
                    days_remaining = (status['next_publish'] - current_time).days
                    logger.info(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {days_remaining} –¥–Ω–µ–π")
            
            if should_publish:
                success = publish_next_article()
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    status = get_status()
                    logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status['pending_articles']} —Å—Ç–∞—Ç–µ–π –æ–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                    logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {status['next_publish'].strftime('%Y-%m-%d %H:%M')}")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
            if current_time.hour % 6 == 0 and current_time.minute < 5:
                status = get_status()
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status['pending_articles']} —Å—Ç–∞—Ç–µ–π –æ–∂–∏–¥–∞—é—Ç, —Å–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {status['next_publish'].strftime('%Y-%m-%d %H:%M')}")
            
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(300)  # 5 –º–∏–Ω—É—Ç
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    logger.info("üëã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç–µ–π')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å')
    parser.add_argument('--publish-now', action='store_true', help='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é —Å–µ–π—á–∞—Å')
    parser.add_argument('--daemon', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞')
    
    args = parser.parse_args()
    
    if args.status:
        init_db()
        status = get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   –°—Ç–∞—Ç–µ–π –æ–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {status['pending_articles']}")
        print(f"   –°—Ç–∞—Ç–µ–π —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã: {status['published_articles']}")
        print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {status['total_posts']}")
        print(f"   –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {status['next_publish'].strftime('%Y-%m-%d %H:%M')}")
    elif args.publish_now:
        init_db()
        success = publish_next_article()
        if success:
            print("‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é")
    else:
        run_scheduler()
