#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º.
"""

import sqlite3
import csv
import sys
import os
from datetime import datetime, timezone
from pathlib import Path

# –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ
CATEGORY_MAPPING = {
    'Culture': 'AI & Culture',
    'Society': 'AI & Society', 
    'Practice': 'AI Pro Tips / How-To',
    'Innovation': 'Innovation',
    'Review': 'Review',
    'News': 'News',
    'History': 'History',
    'Video': 'Video'
}

def map_category(category):
    """
    –ú–∞–ø–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.
    
    Args:
        category (str): –ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        
    Returns:
        str: –ú–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ 'News' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    return CATEGORY_MAPPING.get(category, 'News')

def load_csv_plan(csv_file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞–Ω —Å—Ç–∞—Ç–µ–π –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        csv_file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(csv_file_path):
        print(f"‚ùå –§–∞–π–ª {csv_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {"error": "File not found"}
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('storage.db')
    cur = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cur.execute('''
        CREATE TABLE IF NOT EXISTS plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            seed TEXT NOT NULL,
            seo_focus TEXT,
            created_at TEXT NOT NULL,
            last_published_at TEXT,
            status TEXT DEFAULT 'pending',
            category TEXT
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É category, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        cur.execute('ALTER TABLE plans ADD COLUMN category TEXT')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ 'category' –≤ —Ç–∞–±–ª–∏—Ü—É plans")
    except sqlite3.OperationalError:
        # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass
    
    stats = {
        "total_rows": 0,
        "added": 0,
        "skipped_duplicates": 0,
        "errors": 0
    }
    
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            lines = file.readlines()
        
        for row_num, line in enumerate(lines, 1):
            stats["total_rows"] += 1
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            line = line.strip()
            if not line:
                print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {row_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)")
                stats["errors"] += 1
                continue
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            if ',' not in line:
                print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {row_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π)")
                stats["errors"] += 1
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∑–∞–ø—è—Ç—É—é –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º
            comma_pos = line.find(',')
            original_category = line[:comma_pos].strip()
            title = line[comma_pos + 1:].strip()
            
            # –ú–∞–ø–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ
            category = map_category(original_category)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
            cur.execute('SELECT id FROM plans WHERE seed = ?', (title,))
            if cur.fetchone():
                print(f"‚è≠Ô∏è  –°—Ç—Ä–æ–∫–∞ {row_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç) - '{title[:50]}...'")
                stats["skipped_duplicates"] += 1
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
            current_time = datetime.now(timezone.utc).isoformat()
            cur.execute('''
                INSERT INTO plans (seed, seo_focus, created_at, status, category)
                VALUES (?, ?, ?, ?, ?)
            ''', (title, '', current_time, 'pending', category))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            mapping_info = f"{original_category} ‚Üí {category}" if original_category != category else category
            print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {row_num}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ - '{title[:50]}...' (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {mapping_info})")
            stats["added"] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        stats["errors"] += 1
        conn.rollback()
    
    finally:
        conn.close()
    
    return stats

def show_database_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('storage.db')
    cur = conn.cursor()
    
    print("\nüìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cur.execute('SELECT COUNT(*) FROM plans')
    total = cur.fetchone()[0]
    
    cur.execute('SELECT COUNT(*) FROM plans WHERE status = "pending"')
    pending = cur.fetchone()[0]
    
    cur.execute('SELECT COUNT(*) FROM plans WHERE status = "published"')
    published = cur.fetchone()[0]
    
    print(f"   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {total}")
    print(f"   –û–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {pending}")
    print(f"   –£–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã: {published}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try:
        cur.execute('SELECT category, COUNT(*) FROM plans GROUP BY category ORDER BY COUNT(*) DESC')
        categories = cur.fetchall()
        
        if categories:
            print(f"\nüìÇ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in categories:
                print(f"   {category}: {count}")
    except sqlite3.OperationalError:
        # –ö–æ–ª–æ–Ω–∫–∞ category –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        pass
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    try:
        cur.execute('SELECT seed, category, created_at FROM plans ORDER BY created_at DESC LIMIT 5')
        recent = cur.fetchall()
        
        if recent:
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
            for title, category, created_at in recent:
                category_str = f" ({category})" if category else ""
                print(f"   {title[:60]}...{category_str} - {created_at[:10]}")
    except sqlite3.OperationalError:
        # –ö–æ–ª–æ–Ω–∫–∞ category –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –Ω–µ—ë
        cur.execute('SELECT seed, created_at FROM plans ORDER BY created_at DESC LIMIT 5')
        recent = cur.fetchall()
        
        if recent:
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
            for title, created_at in recent:
                print(f"   {title[:60]}... - {created_at[:10]}")
    
    conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python load_csv_plan.py <–ø—É—Ç—å_–∫_csv_—Ñ–∞–π–ª—É>")
        print("üìã –ü—Ä–∏–º–µ—Ä: python load_csv_plan.py plans/plan7-11.csv")
        sys.exit(1)
    
    csv_file = sys.argv[1]
    
    print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ {csv_file}")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    show_database_status()
    
    print(f"\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ {csv_file}...")
    print("-" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV
    stats = load_csv_plan(csv_file)
    
    if "error" in stats:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_rows']}")
    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {stats['added']}")
    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats['skipped_duplicates']}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    show_database_status()
    
    print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
